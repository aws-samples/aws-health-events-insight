---
AWSTemplateFormatVersion: '2010-09-09'
Description: Health Module QS DataSet Setup

Parameters:
  DataCollectionBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
  QuickSightAnalysisAuthor:
    Type: String
    Description: The QuickSight analysis author Arn that is allowed configure and manage the QS Analyses and dashboards. e.g. arn:aws:quicksight:<Region>:<AccountID>:user/default/<username>
  HeidiDataCollectionDB:
    Type: String
    Description: Athena DataCollection DB
    Default: "heididatacollectiondb"
  HeidiQSDataSourceArn:
    Type: String
    Description: Quick Sight Datasource Arn.

Resources:  
  GlueHealthTable:
  # AWS Glue Table resource representing  AWS Health External Table
    Type: AWS::Glue::Table
    Properties:
      # Reference to the AWS Glue Database
      DatabaseName: !Ref HeidiDataCollectionDB
      CatalogId: !Sub '${AWS::AccountId}'
      TableInput:
        Name: awshealthevent
        Description: 'AWS Health Events Data'
        Owner: GlueTeam
        PartitionKeys:
          - Name: date_created
            Type: string
          - Name: source_partition 
            Type: string
        Parameters:
          EXTERNAL: 'TRUE'  # 'EXTERNAL' should be a string
          projection.enabled: 'true'
          projection.date_created.type: 'date'
          projection.date_created.format: 'yyyy/MM/dd'
          projection.date_created.interval: '1'
          projection.date_created.interval.unit: 'DAYS'
          projection.date_created.range: '2021/01/01,NOW'
          projection.source_partition.type: 'enum'
          projection.source_partition.values: 'heidi.health,aws.health,awshealthtest'
          storage.location.template: !Join ['', ['s3://', !Ref DataCollectionBucket, '/DataCollection-data/${source_partition}/${date_created}/']]
        StorageDescriptor:
          # Columns and their data types for the table
          Columns:
            - Name: version
              Type: string
              Comment: 'from deserializer'
            - Name: id
              Type: string
              Comment: 'from deserializer'
            - Name: detail-type
              Type: string
              Comment: 'from deserializer'
            - Name: source
              Type: string
              Comment: 'from deserializer'
            - Name: account
              Type: string
              Comment: 'from deserializer'
            - Name: time
              Type: string
              Comment: 'from deserializer'
            - Name: region
              Type: string
              Comment: 'from deserializer'
            - Name: resources
              Type: array<string>
              Comment: 'from deserializer'
            - Name: detail
              Type: struct<eventarn:string,affectedAccount:string,service:string,eventscopecode:string,communicationid:string,lastupdatedtime:string,eventregion:string,eventtypecode:string,eventtypecategory:string,starttime:string,endtime:string,eventdescription:array<struct<language:string,latestdescription:string>>,affectedentities:array<struct<entityvalue:string,status:string,entityarn:string,entityaz:string,entitytags:array<struct<value:string,key:string>>>>>
              Comment: 'from deserializer'
          # S3 location of the data for the Athena External Table
          Location: !Sub 's3://${DataCollectionBucket}/DataCollection-data'
          InputFormat: 'org.apache.hadoop.mapred.TextInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.openx.data.jsonserde.JsonSerDe'
            Parameters:
              paths: 'account,detail,detail-type,id,region,resources,source,time,version'
          Compressed: false
        TableType: EXTERNAL_TABLE
        Retention: 30

  QSDataSetHealthEvent:
  # Create an AWS QuickSight DataSet for AWS Health events
      Type: AWS::QuickSight::DataSet
      Properties:
        AwsAccountId: !Sub ${AWS::AccountId}
        ImportMode: SPICE
        DataSetId: !Sub "AWSHealthEvent-${AWS::AccountId}-${AWS::Region}"
        Name: !Sub "AWSHealthEvent-${AWS::AccountId}-${AWS::Region}"
        PhysicalTableMap:
          "AWSHealthQSPT":
            CustomSql:
              DataSourceArn: !Ref HeidiQSDataSourceArn
              Name: !Sub "awshealthevents-${AWS::AccountId}-${AWS::Region}"
              SqlQuery: |-
                      WITH latestRow AS (
                        select * from (SELECT
                          detail.eventTypeCode,
                          source AS eventSource,
                          COALESCE(detail.affectedAccount, account) as account,
                          detail.service,
                          detail.eventScopeCode,
                          CASE 
                              WHEN ((detail.eventTypeCategory = 'scheduledChange') AND (detail.eventArn like '%PLANNED_LIFECYCLE_EVENT%')) THEN 'PlannedLifeCycle'
                              ELSE detail.eventTypeCategory
                          END AS "eventTypeCategory",
                          detail.eventArn,
                          detail.communicationid,
                          detail.eventRegion,
                          entities.entityValue AS affectedEntities,
                          entities.status As affectedEntityStatus,
                          SUBSTRING(detail.eventdescription[1].latestdescription, 1, 2000) AS eventDescription1,
                          SUBSTRING(detail.eventdescription[1].latestdescription, 2001) AS eventDescription2,
                          rank() OVER (PARTITION BY detail.eventArn, COALESCE(detail.affectedAccount, account) ORDER BY CAST(date_parse(detail.lastUpdatedTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) DESC) AS rowrank,
                          array_join(resources, ', ') AS resources,
                          CAST(from_iso8601_timestamp("time") AS timestamp) AS ingestionTime,
                          CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) AS endTime,
                          CAST(date_parse(detail.startTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) AS startTime,
                          CAST(date_parse(detail.lastUpdatedTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) AS lastUpdatedTime,
                          CAST(DATE_DIFF('HOUR', CAST(date_parse(detail.startTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp), CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp)) AS BIGINT) AS eventDuration,
                          CASE
                              WHEN (CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) > current_timestamp) THEN 'scheduledChange'
                              WHEN ((CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) IS NULL) AND (detail.eventTypeCategory = 'scheduledChange') AND (detail.eventArn not like '%PLANNED_LIFECYCLE_EVENT%')) THEN 'scheduledChange'
                              WHEN ((CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) IS NULL) AND (detail.eventTypeCategory = 'scheduledChange') AND (entities.status like '%RESOLVED%')) THEN 'Archived'
                              WHEN ((CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) IS NULL) AND (detail.eventTypeCategory = 'scheduledChange') AND (detail.eventArn like '%PLANNED_LIFECYCLE_EVENT%')) THEN 'PlannedLifeCycle'
                              WHEN (((CAST(date_parse(detail.startTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) + (7 * INTERVAL '1' DAY)) < current_timestamp) AND (detail.eventTypeCategory = 'accountNotification') AND (CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) IS NULL)) THEN 'Archived'
                              WHEN (CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) IS NULL) THEN 'Active'
                              ELSE 'Archived'
                          END AS "Status",
                          CASE
                              WHEN (detail.eventArn like '%PLANNED_LIFECYCLE_EVENT%') THEN 'Y'
                              ELSE 'N'
                          END AS "plannedLifeCycleEvent"
                      FROM "AwsDataCatalog"."heididatacollectiondb"."awshealthevent"
                      LEFT JOIN UNNEST(detail.affectedEntities) AS t(entities) ON TRUE)
                      WHERE rowrank = 1),
                      tagInfo AS (select * from (
                        SELECT 
                          detail.entityarn as entityArn,
                          rank() OVER (PARTITION BY detail.entityarn, tags.entitykey,tags.entityvalue ORDER BY time DESC) AS rowranktag,
                          '' as entityAZ,
                          tags.entitykey as entityTagKey,
                          tags.entityvalue as entityTagValue
                      FROM "AwsDataCatalog"."heididatacollectiondb"."taginfo", unnest(detail.tags) as t(tags)) where rowranktag =1)
                      SELECT 
                        detail.*, 
                        taginfo.*, 
                        COALESCE(accountinfo."name", detail."account") AS accountName, 
                        accountinfo.Tag as accountTag
                      FROM latestRow detail
                      LEFT JOIN "AwsDataCatalog"."heididatacollectiondb"."accountsinfo" accountinfo ON detail.account = accountinfo."accountid"
                      LEFT JOIN tagInfo ON detail.affectedEntities in (taginfo.entityarn)
              Columns:
              - Name: eventTypeCode
                Type: STRING
              - Name: affectedEntityStatus
                Type: STRING
              - Name: rowrank
                Type: INTEGER
              - Name: eventSource
                Type: STRING
              - Name: account
                Type: STRING
              - Name: eventScopeCode
                Type: STRING
              - Name: eventTypeCategory
                Type: STRING
              - Name: eventArn
                Type: STRING
              - Name: communicationid
                Type: STRING
              - Name: eventDescription1
                Type: STRING
              - Name: eventDescription2
                Type: STRING
              - Name: resources
                Type: STRING
              - Name: ingestionTime
                Type: DATETIME
              - Name: endTime
                Type: DATETIME
              - Name: startTime
                Type: DATETIME
              - Name: lastUpdatedTime
                Type: DATETIME
              - Name: eventDuration
                Type: INTEGER
              - Name: Status
                Type: STRING
              - Name: eventRegion
                Type: STRING
              - Name: service
                Type: STRING
              - Name: accountName
                Type: STRING
              - Name: accountTag
                Type: STRING
              - Name: affectedEntities
                Type: STRING
              - Name: entityArn
                Type: STRING
              - Name: entityAZ
                Type: STRING
              - Name: entityTagKey
                Type: STRING
              - Name: entityTagValue
                Type: STRING
              - Name: plannedLifeCycleEvent
                Type: STRING
        LogicalTableMap:
          AWSHealthQSLT:
            Alias: !Sub "awshealthevents-${AWS::AccountId}-${AWS::Region}"
            DataTransforms:
            - ProjectOperation:
                ProjectedColumns:
                - eventTypeCode
                - affectedEntityStatus
                - rowrank
                - eventSource
                - account
                - eventScopeCode
                - eventTypeCategory
                - eventArn
                - communicationid
                - eventDescription1
                - eventDescription2
                - resources
                - ingestionTime
                - endTime
                - startTime
                - lastUpdatedTime
                - eventDuration
                - Status
                - eventRegion
                - service
                - accountName
                - accountTag
                - affectedEntities
                - entityArn
                - entityAZ
                - entityTagKey
                - entityTagValue
                - plannedLifeCycleEvent
            Source:
              PhysicalTableId: AWSHealthQSPT
        Permissions:
        - Principal: !Sub "${QuickSightAnalysisAuthor}"
          Actions:
            - quicksight:DescribeDataSet
            - quicksight:DescribeDataSetPermissions
            - quicksight:PassDataSet
            - quicksight:DescribeIngestion
            - quicksight:ListIngestions
            - quicksight:UpdateDataSet
            - quicksight:DeleteDataSet
            - quicksight:CreateIngestion
            - quicksight:CancelIngestion
            - quicksight:UpdateDataSetPermissions

  QSDataSetHealthEventRefresh:
    # Create an AWS QuickSight Refresh Schedule for AWS Health events
    DependsOn: QSDataSetHealthEvent
    Type: AWS::QuickSight::RefreshSchedule
    Properties: 
      AwsAccountId: !Sub ${AWS::AccountId}
      DataSetId: !Sub "AWSHealthEvent-${AWS::AccountId}-${AWS::Region}"
      Schedule:
        RefreshType: FULL_REFRESH
        ScheduleFrequency:
          Interval: HOURLY
        ScheduleId: QSDataSetHealthEventRefresh

Outputs:
  QSDataSetHealthEvent:
    Value: !GetAtt QSDataSetHealthEvent.Arn
    Export:
      Name: QSDataSetHealthEvent