---
AWSTemplateFormatVersion: '2010-09-09'
Description: Health Module EventUrl Setup

Parameters:
  DataCollectionAccountID:
    Type: String
    Description: AccountId of where the collector is deployed
  DataCollectionRegion:
    Type: String
    Description: Account Region of where the collector is deployed
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of resources created where required. Note you may wish to add a dash at the end to make more readable
    Default: "heidi-"
  AllowedIpRange:
    Default: "0.0.0.0/32"
    Type: String
    Description: AllowedIpRange who can access EventDetailUrls.
  AuthorizationType:
    Default: "NONE"
    Type: String
    Description: Specify a valid Default value for AuthorizationType. Valid values are ["NONE", "AWS_IAM", "CUSTOM", "COGNITO_USER_POOLS"]

Resources:
  HealthEventDynamoDB:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      AttributeDefinitions:
        - AttributeName: eventArn
          AttributeType: S
        - AttributeName: account
          AttributeType: S
      KeySchema:
        - AttributeName: eventArn
          KeyType: HASH
        - AttributeName: account
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      Replicas: 
        - Region: !Sub "${AWS::Region}"

  HealthEventLambadDdbRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole 
      Policies:
        - PolicyName: cloudwatch-logsAccess-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
        - PolicyName: AwshealtheventDDBAccess-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt HealthEventDynamoDB.Arn
        - PolicyName: AwshealtheventSendEventAccess-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: !Sub "arn:${AWS::Partition}:events:${DataCollectionRegion}:${DataCollectionAccountID}:event-bus/${ResourcePrefix}DataCollectionBus-${DataCollectionAccountID}"

  HealthEventLambadDdb:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Given AWSLambda ExecutionRole and allows Cloudwatch"
    Properties: 
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          # Initialize the DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['DynamoDBName'])

          def lambda_handler(event, context):
              try:
                  # Extract the data from the event
                  payload = event['detail']
                  event_data = {
                      'eventDescription': payload.get('eventDescription', [{'latestDescription': None}])[0]['latestDescription'],
                      'affectedEntities': ', '.join(entity['entityValue'] for entity in payload.get('affectedEntities', [])),
                      'account': event.get('account')
                  }
                  event_data.update((key, value) for key, value in payload.items() if key not in event_data)
                  print(event_data)

                  # Put the data into DynamoDB
                  response = table.put_item(Item=event_data)

                  # If successful, return the response
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data inserted successfully.')
                  }
              except Exception as e:
                  # If there's an error, return the error message
                  return {
                      'statusCode': 500,
                      'body': json.dumps(str(e))
                  }
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 900
      ReservedConcurrentExecutions: 5
      Role: !GetAtt HealthEventLambadDdbRole.Arn
      Environment:
        Variables:
          DynamoDBName: !Ref HealthEventDynamoDB
  
  HealthtEventDataCollectionBusRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Event Health bus rule for aws.health events"
      EventBusName: !Sub ${ResourcePrefix}DataCollectionBus-${DataCollectionAccountID}
      EventPattern:
        source:
          - "heidi.health"
          - "aws.health"
      Targets:
        - Arn: !GetAtt HealthEventLambadDdb.Arn
          Id: "LambaasTarget"

  EventHealthLambdaForDDBPermissions:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HealthEventLambadDdb.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HealthtEventDataCollectionBusRule.Arn

  apiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowApiGatewayServiceToAssumeRole
            Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: dynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt HealthEventDynamoDB.Arn
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"

  ApiGatewayLogs:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/api-gateway/${apiGateway}
      RetentionInDays: 30

  APIGatewayAccountSettings:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt apiGatewayRole.Arn
  
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub HealthEventDetailUrl-${AWS::AccountId}-${AWS::Region}-api
      Description: (AWSHEIDI) for eventdetail Urls
      Policy: {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Deny",
                "Principal": "*",
                "Action": "execute-api:Invoke",
                "Resource": "execute-api:/*",
                "Condition": {
                    "NotIpAddress": {
                        "aws:SourceIp": !Ref AllowedIpRange
                    }
                }
            },
            {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "execute-api:Invoke",
                "Resource": "execute-api:/*"
            }
        ]
       }

  apiGatewayMethodResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: healthevent

  apiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: !Ref AuthorizationType
      HttpMethod: GET
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            text/html: Empty
      RequestParameters: 
        method.request.querystring.eventArn: False
        method.request.querystring.account: False
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Credentials: !GetAtt apiGatewayRole.Arn 
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/GetItem
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          application/json: !Sub 
              |- 
              {
                "TableName": "${HealthEventDynamoDB}",
                "Key":{
                  "eventArn": {"S": "$util.escapeJavaScript($input.params().querystring.get("eventArn"))"},
                   "account": {"S": "$util.escapeJavaScript($input.params().querystring.get("account"))"}
                }
              }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json:
                  |- 
                  <html>
                  <h1>Event Detail</h1>
                  <br><b>Service:</b> $input.path('$.Item.service.S')<br>
                  <br><b>Account:</b> $input.path('$.Item.account.S')<br>
                  <br><b>Region:</b> $input.path('$.Item.eventRegion.S')<br>
                  <br><b>Affected Entities:</b> $input.path('$.Item.affectedEntities.S')<br>
                  <br><b>Description:</b> $input.json('$.Item.eventDescription.S').replaceAll("\\n","<br>")
                  </html>
      ResourceId: !Ref apiGatewayMethodResource
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: 'v1'
      StageDescription:     
        AccessLogSetting:
          DestinationArn: !GetAtt ApiGatewayLogs.Arn
          Format: $context.requestId 

Outputs:
  EventDetailApiEndpoint: 
    Description: "API Gateway endpoint URL for Prod stage for Product api"
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1/healthevent?"
